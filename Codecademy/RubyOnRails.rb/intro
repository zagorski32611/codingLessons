=begin
Let's get started by making a Rails app for a personal website. We'll explain each step in the next exercise.

In the terminal, type

$ rails new MySite
=end

rails new MySite
bundle install
rails server

# you can also use:
rails s -p 4001

=begin
In three commands, you built a working Rails app that displays the Rails default page. How does it work?

The rails new command created a new Rails app named MySite. It generated a number of files and folders that we will use to build the app.
 In the Code Editor, click on the folder icon  to see these files and folders. We'll see what these files and
 folders are for in the next exercises. The rails new command is the starting point of every Rails project.
The bundle install command installed all the software packages needed by the new Rails app. These software packages
are called gems and they are listed in the file Gemfile.
The rails server command started the Rails development server so that we could preview the app in the browser by
visiting http://localhost:8000. This development server is called WEBrick.
=end

=begin
What happens when you visit http://localhost:8000 in the browser? Check out the diagram in the browser.

The browser makes a request for the URL http://localhost:8000.
The request hits the Rails router in config/routes.rb. The router recognizes the URL and sends the request to the controller.
The controller receives the request and processes it.
The controller passes the request to the view.
The view renders the page as HTML.
The controller sends the HTML back to the browser for you to see.
This is called the request/response cycle. It's a useful way to see how a Rails app's files and folders fit together.
Instructions
1.
Looking at the request/response cycle, we need three parts to build a Rails app: a controller, a route, and a view. Let's start here by creating a controller.

In the terminal, type:
=end

rails generate controller Pages

#After rails generate finishes running, in the Code Editor, open app/controllers/pages_controller.rb. Within the class PagesController, add a method home:

class PagesController < ApplicationController
  def home
  end
end

=begin
Great! We created a new controller named Pages. How did we do this?

The rails generate controller Pages command generated a new controller named Pages. This created a file named app/controllers/pages_controller.rb.
Inside the new Pages controller, we added a method called home. Methods in Rails controllers are also referred to as controller actions, so here we added the home action
to the Pages controller.
Instructions
1.
Now that we have a controller, let's move on to the second part of the request/response cycle and create a route.

Open config/routes.rb and underneath line 1, type:

get 'welcome' => 'pages#home'
=end

get 'welcome' => 'pages#home'

#you can also use:
root 'pages#home'

=begin
Well done! Now when a user visits http://localhost:8000/welcome, the route

get 'welcome' => 'pages#home'
will tell Rails to send this request to the Pages controller's home action.
1.
Now that we have a controller and a route, let's move on to the third part of
the request/response cycle and create a view.

Open app/views/pages/home.html.erb, and type in the following HTML. Fill in your own name.

<div class="main">
  <div class="container">
    <h1>Hello my name is __</h1>
    <p>I make Rails apps.</p>
  </div>
</div>
We've provided CSS in the file app/assets/stylesheets/pages.css.scss.


Congratulations! You built a Rails app from scratch. What can we generalize so far?

Using the request/response cycle as a guide, this has been our workflow when making a Rails app.

Generate a new Rails app.
Generate a controller and add an action.
Create a route that maps a URL to the controller action.
Create a view with HTML and CSS.
Run the local web server and preview the app in the browser.

=end




This is good to know:
What did we just do?

We created two models named Tag and Destinations.
In the model files, we used the methods has_many and belongs_to define an association between Tag and Destination:

has_many :destinations denotes that a single Tag can have multiple Destinations.
belongs_to :tag denotes that each Destination belongs to a single Tag.
The has_many / belongs_to pair is frequently used to define one-to-many relationships. A few examples are:

a Library has many Books; a Book belongs to a Library
an Album has many Photos; a Photo belongs to an Album
a Store has many Products; a Product belongs to a Store
Instructions
1.
Now that there's an association between Tag and Destination, let's continue and add columns to the migration files.

Open the migration file in db/migrate/ for the tags table, and add the following columns:

a string column called title
a string column called image




Nicely done! You can now update a destination's name and description. How does it work?

When you visit http://localhost:8000/destinations/1/edit to edit a destination, it triggers the first turn of the request/response cycle:

The browser makes a HTTP GET request for the URL /destinations/1/edit.
The Rails router maps this URL to the Destinations controller's edit action. The edit action finds the destination with id 1, stores it in @destination, and passes it on to the view app/views/destinations/edit.html.erb.
In the view, form_for creates a form with the fields of the @destinations object.
Then when you fill out the form and submit it, it triggers the second turn of the request/response cycle:

The browser sends the data to the Rails app via an HTTP POST request to the URL /destinations/update.
This time, the Rails router maps this URL to the update action.
The update uses the destination_params method to safely collect data from the form. It finds the destination in the database, updates its attributes, and redirects to the destination's show page.
