ls
// this lists the currect directory

vi pwd stands for "print working directory". It outputs the name of the directory
you are currently in, called the working directory.

Here the working directory is blog/. In Codecademy courses, your working
directory is usually inside the home/ccuser/workspace/ directory.

Together with ls, the pwd command is useful to show
where you are in the filesystem.

use cd .. to move UP in the directory

mkdir makes a new directory

touch keyboard.txt makes a new txt file in the working directory!


SUMMARY:
Congratulations! You've learned five commands commonly used to navigate the
filesystem from the command line. What can we generalize so far?
The command line is a text interface for the computer's operating system.
To access the command line, we use the terminal.
A filesystem organizes a computer's files and directories into a tree structure.
It starts with the root directory. Each parent directory can contain
more child directories and files. From the command line, you can navigate
through files and folders on your computer:



pwd outputs the name of the current working directory.
ls lists all files and directories in the working directory.
cd switches you into the directory you specify.
mkdir creates a new directory in the working directory.
touch creates a new file inside the working directory.


Congratulations! You learned how to use the command line to
view and manipulate the filesystem. What can we generalize so far?

Options modify the behavior of commands:
ls -a lists all contents of a directory, including hidden files and directories
ls -l lists all contents in long format
ls -t orders files and directories by the time they were last modified
Multiple options can be used together, like ls -alt
From the command line, you can also copy, move, and remove files and directories:
cp copies files
mv moves and renames files
rm removes files
rm -r removes directories
Wildcards are useful for selecting groups of files and directories


Let's learn more about standard input, standard output, and standard error:

standard input, abbreviated as stdin, is information inputted into the terminal through the keyboard or input device.
standard output, abbreviated as stdout, is the information outputted after a process is run.
standard error, abbreviated as stderr, is an error message outputted by a failed process.
Redirection reroutes standard input, standard output, and standard error to or from a different location.



How does redirection work?

$ echo "Hello" > hello.txt
The > command redirects the standard output to a file.
Here, "Hello" is entered as the standard input. The standard output
"Hello" is redirected by > to the file hello.txt.

$ cat hello.txt
The cat command outputs the contents of a file to the terminal.
When you type cat hello.txt, the contents of hello.txt are displayed.


$ cat glaciers.txt >> rivers.txt
>> takes the standard output of the command on the left and appends (adds)
it to the file on the right. You can view the output data of the file with
cat and the filename. Here, the the output data of rivers.txt will contain the
original contents of rivers.txt with the content of glaciers.txt appended to it.


$ cat volcanoes.txt | wc
| is a "pipe". The | takes the standard output of the command on the left,
and pipes it as standard input to the command on the right. You can think
of this as "command to command" redirection.

Here the output of cat volcanoes.txt is the standard input of wc. in turn,
the wc command outputs the number of lines, words, and characters
in volcanoes.txt, respectively.

$ cat volcanoes.txt | wc | cat > islands.txt
Multiple |s can be chained together. Here the standard output of cat
volcanoes.txt is "piped" to the wc command. The standard output of wc is
then "piped" to cat. Finally, the standard output of cat is redirected to
islands.txt.
You can view the output data of this chain by typing cat islands.txt.


$ uniq deserts.txt
uniq stands for "unique" and filters out adjacent, duplicate lines in a file.
Here uniq deserts.txt filters out duplicates of "Sahara Desert", because the
duplicate of 'Sahara Desert' directly follows the previous instance. The
"Kalahari Desert" duplicates are not adjacent, and thus remain.

$ sort deserts.txt | uniq
A more effective way to call uniq is to call sort to alphabetize a file,
and "pipe" the standard output to uniq. Here by piping sort deserts.txt
to uniq, all duplicate lines are alphabetized (and thereby made adjacent)
and filtered out.

sort deserts.txt | uniq > uniq-deserts.txt
Here we simply send filtered contents to uniq-deserts.txt,
which you can view with the cat command.

$ grep Mount mountains.txt
grep stands for "global regular expression print". It searches files
for lines that match a pattern and returns the results. It is also case
sensitive. Here, grep searches for "Mount" in mountains.txt.

$ grep -i Mount mountains.txt
grep -i enables the command to be case insensitive. Here, grep searches for
capital or lowercase strings that match Mount in mountains.txt.

The above commands are a great way to get started with grep. If you are
familiar with regular expressions, you can use regular expressions to
search for patterns in files.

$ grep -R Arctic /home/ccuser/workspace/geography
grep -R searches all files in a directory and outputs filenames
and lines containing matched results. -R stands for "recursive".
Here grep -R searches the /home/ccuser/workspace/geography directory for the
string "Arctic" and outputs filenames and lines with matched results.

$ grep -Rl Arctic /home/ccuser/workspace/geography
grep -Rl searches all files in a directory and outputs only filenames with
matched results. -R stands for "recursive" and l stands for
"files with matches". Here grep -Rl searches the
/home/ccuser/workspace/geography directory for the string
"Arctic" and outputs filenames with matched results.


$ sed 's/snow/rain/' forests.txt
sed stands for "stream editor". It accepts standard input and modifies it
 based on an expression, before displaying it as output data. It is similar to
 "find and replace".

Let's look at the expression 's/snow/rain/':

s: stands for "substitution". it is always used when using sed for substitution.
snow: the search string, the text to find.
rain: the replacement string, the text to add in place.
In this case, sed searches forests.txt for the word "snow" and replaces it with
"rain." Importantly, the above command will only replace the first
instance of "snow" on a line.

$ sed 's/snow/rain/g' forests.txt
The above command uses the g expression, meaning "global". Here sed searches
forests.txt for the word "snow" and replaces it with "rain", globally.
All instances of "snow" on a line will be turned to "rain".




Congratulations! You learned how to use the command line to redirect
standard input and standard output. What can we generalize so far?

Redirection reroutes standard input, standard output, and standard error.
The common redirection commands are:

> redirects standard output of a command to a file, overwriting previous content.
>> redirects standard output of a command to a file, appending new content to old content.
< redirects standard input to a command.
| redirects standard output of a command to another command.
A number of other commands are powerful when combined with redirection commands:

sort: sorts lines of text alphabetically.
uniq: filters duplicate, adjacent lines of text.
grep: searches for a text pattern and outputs it.
sed : searches for a text pattern, modifies it, and outputs it.




You created a file in nano called ~/.bash_profile and added a greeting.
How does this work?

$ nano ~/.bash_profile
~/.bash_profile is the name of file used to store environment settings.
It is commonly called the "bash profile". When a session starts,
it will load the contents of the bash profile before executing commands.

The ~ represents the user's home directory.
The . indicates a hidden file.
The name ~/.bash_profile is important, since this is how the command line
recognizes the bash profile.
The command nano ~/.bash_profile opens up ~/.bash_profile in nano.
The text echo "Welcome, Jane Doe" creates a greeting in the bash profile,
which is saved. It tells the command line to echo the string
"Welcome, Jane Doe" when a terminal session begins.
The command source ~/.bash_profile activates the changes in
 ~/.bash_profile for the current session. Instead of closing the
 terminal and needing to start a new session, source makes the changes
 available right away in the session we are in.


 What happens when you store this alias in ~/.bash_profile?

 alias pd="pwd"
 The alias command allows you to create keyboard shortcuts, or aliases,
 for commonly used commands.

 Here alias pd="pwd" creates the alias pd for the pwd command, which is
 then saved in the bash profile. Each time you enter pd, the output will
 be the same as the pwd command. The command source ~/.bash_profile makes
 the alias pd available in the current session.
 Each time we open up the terminal, we can use the pd alias.
